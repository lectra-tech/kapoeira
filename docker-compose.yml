---
version: '3.5'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_KAFKA_VERSION}
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - local_kafka
  kafka:
    image: confluentinc/cp-server:${CONFLUENT_KAFKA_VERSION}
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    networks:
      - local_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_KAFKA_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    networks:
      - local_kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_KAFKA_VERSION}
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    networks:
      - local_kafka
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://primary-ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
  primary-ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_KAFKA_VERSION}
    hostname: primary-ksqldb-server
    container_name: primary-ksqldb-server
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    networks:
      - local_kafka
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
  create-topics:
    profiles:
      - test
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_KAFKA_VERSION}
    volumes:
      - ./src/test/resources/scripts:/opt/kapoeira/scripts
    working_dir: /opt/kapoeira/scripts
    networks:
      - local_kafka
    depends_on:
      - kafka
      - schema-registry
    container_name: create-topics
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
        cub kafka-ready -b kafka:29092 1 300 && \
        echo Creating topics... && \
        ./createTopics.sh && \
        echo Creating subjects... && \
        ./createSchemas.sh'"
  create-streams:
    profiles:
      - test
    image: confluentinc/cp-ksqldb-cli:${CONFLUENT_KAFKA_VERSION}
    container_name: create-streams
    volumes:
      - ./src/test/resources/scripts:/opt/kapoeira/scripts
    depends_on:
      create-topics:
        condition: service_completed_successfully
    networks:
      - local_kafka
    entrypoint: ksql
    command:
      - -f
      - /opt/kapoeira/scripts/createStreams.ksql
      - --
      - http://primary-ksqldb-server:8088
  kapoeira:
    profiles:
      - test
    image: local/kapoeira:test
    build: .
    container_name: kapoeira-it
    depends_on:
      create-streams:
        condition: service_completed_successfully
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./src/test/resources/features:/features
      - ./target/reports:/reports
    env_file:
      - local.env
    networks:
      - local_kafka
networks:
  local_kafka:
    name: local_kafka
